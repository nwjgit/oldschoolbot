import { readFileSync, writeFileSync } from 'node:fs';

import '../src/lib/safeglobals';
import { gearSetupsForWIKI } from '../docs/src/content/gearImages/gearSetups';
import { type CombatAchievement, CombatAchievements } from '../src/lib/combat_achievements/combatAchievements';
import { generateGearImage } from '../src/lib/gear/functions/generateGearImage';
import type { GearSetupType } from '../src/lib/gear/types';
import type { Gear } from '../src/lib/structures/Gear';

async function generateGearImageForWiki(gear: Gear, setup: GearSetupType, petID: number | null) {

	// Generate the image
	const image = await generateGearImage(undefined, gear, setup, petID);
	return image;
}

async function generateImagesForWiki() {
	for (const { name, gear, setup, pet } of gearSetupsForWIKI) {
		const imageBuffer = await generateGearImageForWiki(gear, setup as GearSetupType, pet.id);
		writeFileSync(`./docs/src/content/gearImages/${name}.txt`, imageBuffer);
	}
}

function combatAchievementHowToFinish(ca: CombatAchievement) {
	if ('rng' in ca) {
		return `1 in ${ca.rng.chancePerKill} chance per kill`;
	}
	if ('requirements' in ca) {
		return ca.requirements.requirements
			.map(req => ca.requirements.formatRequirement(req))
			.join(',')
			.replace('Kill Count Requirement: ', '')
			.replace('Minigame Requirements: ', '');
	}
	throw ca;
}

function handleMarkdownEmbed(identifier: string, filePath: string, contentToInject: string) {
	const contentToReplace = readFileSync(`./docs/src/content/docs/${filePath}`, 'utf8');
	const startMarker = `[[embed.${identifier}.start]]`;
	const endMarker = `[[embed.${identifier}.end]]`;
	const startIndex = contentToReplace.indexOf(startMarker);
	const endIndex = contentToReplace.indexOf(endMarker);

	if (startIndex === -1 || endIndex === -1) {
		console.error(`Markers (not found in the file. ${filePath} ${identifier}`);
		process.exit(1);
	}

	const newContent = `${contentToReplace.slice(0, startIndex + startMarker.length)}
{/* DO NOT EDIT - This section is auto-generated by the build script */}
${contentToInject}
{/* DO NOT EDIT - This section is auto-generated by the build script */}
${contentToReplace.slice(endIndex)}`;

	writeFileSync(`./docs/src/content/docs/${filePath}`, newContent, 'utf8');
}
async function renderCAMarkdown() {
	let markdown = '<Tabs>\n';
	for (const tier of Object.values(CombatAchievements)) {
		markdown += `<TabItem label="${tier.name}">
| Monster | Task Name | How To Unlock |
| -- | -- | -- |
`;
		for (const task of tier.tasks.sort((a, b) => a.monster.localeCompare(b.monster))) {
			markdown += `| ${task.monster} | ${task.name} | ${combatAchievementHowToFinish(task)} |\n`;
		}
		markdown += '</TabItem>\n';
	}
	markdown += '</Tabs>\n';
	handleMarkdownEmbed('ca_tasks', 'osb/combat-achievements.mdx', markdown);
}

async function wiki() {
	await renderCAMarkdown();
	await generateImagesForWiki();
}

wiki();
